/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DeliverManRole;

import Business.DB4OUtil.DB4OUtil;
import Business.DeliveryMan.DeliveryManDirectory;
import Business.EcoSystem;
import Business.Patient.Patient;
import Business.Pharmacist.PharamacyAdmin;

import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.OrderInventoryWorkRequest;
import Business.WorkQueue.PharmacyOrder;
import Business.WorkQueue.PlaceNewOrderWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Ash
 */
public class DeliverManWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DeliverManWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount user;
    private EcoSystem system;
    Patient pat;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    DefaultTableModel dtm;
    ArrayList<Patient> array1;
    List<PharmacyOrder> orderItemList = new ArrayList<PharmacyOrder>();
    WorkRequest workrequest;
    private PharamacyAdmin pharObj;
    PlaceNewOrderWorkRequest placeWorkRequest;
    String patname;
    String pharName;
    DeliveryManDirectory delDir;
    
     public DeliveryManWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.user = account;
        this.system = business;
      
        
        populateTable();
    
    }
    
    public void populateTable(){
                DefaultTableModel dtm = (DefaultTableModel) delManTbl.getModel();
        dtm.setRowCount(0);
        System.out.println(system.getWorkQueue().getWorkRequestList());

        for (WorkRequest request : system.getWorkQueue().getWorkRequestList()) {
            System.out.println(request);
            System.out.println(this.user);
            if(request instanceof PlaceNewOrderWorkRequest|| request instanceof OrderInventoryWorkRequest) {
                if(request.getDeliveryMan()!=null){
            System.out.println(request.getDeliveryMan());
                if (request.getDeliveryMan().equals(this.user)) {
                Object[] row = new Object[4];
                //row[0] = request;
                row[0] = request;
                row[1] = request.getReceiver().getEmployee().getName();
                row[2] = request.getStatus();
                row[3] = request.getRequestDate();
                dtm.addRow(row);
            }
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              

                int selectedRow = delManTbl.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "You must select a row first!");
        } else {
            if (delManTbl.getValueAt(selectedRow, 1).equals("Completed")) {
                JOptionPane.showMessageDialog(null, "Order is already completed!");
            } else {
                WorkRequest request = (WorkRequest) delManTbl.getValueAt(selectedRow, 0);
                request.setStatus("Pending");
                populateTable();
            }

        }
          dB4OUtil.storeSystem(system);
    }                                             

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        
                int selectedRow = delManTbl.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "You must select a row first!");
        }

        WorkRequest request = (WorkRequest) delManTbl.getValueAt(selectedRow, 0);
        if (delManTbl.getValueAt(selectedRow, 1).equals("Completed")) {
            JOptionPane.showMessageDialog(null, "Order is already processed and completed!");
        } else {
               
                request.setStatus("Delivered");
                populateTable();
        }

          dB4OUtil.storeSystem(system);  
    }                                              

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        populateTable();
    }                                              

    // Variables declaration - do not modify                     
    private javax.swing.JButton assignJButton;
    private javax.swing.JTable delManTbl;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    // End of variables declaration                   
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

